<?php

namespace askuri\MuxConvert;

use askuri\MuxConvert\FileTypes\File;
use askuri\MuxConvert\FileTypes\Mux;
use askuri\MuxConvert\FileTypes\Ogg;
use Exception;

/**
 * A class to convert .mux to .ogg files and the other way around.
 * 
 * Usage:
 * Instantiate a new object of the class, passing the content of either a
 * mux or ogg file to the constructor. It will automatically determine the
 * filetype. After, you can call mux2ogg to get a get an ogg and ogg2mux to
 * get a mux.
 */
class MuxConvert {
    /**
     * @var askuri\MuxConvert\File representation of the file
     */
    private $srcFile;
    
    public function __construct(string $sourceFileContent) {  
        // Get an instance of either Ogg or Mux file type.
        // Automatically determines the type based on the Magic Number.
        $this->srcFile = File::factory($sourceFileContent);
    }
    
    /**
     * Convert the file specified in __construct to an ogg file.
     * 
     * @return string file content of the ogg file
     * @throws Exception
     */
    public function mux2ogg(): string {
        if (false == $this->srcFile instanceof Mux) {
            throw new \Exception('Can only call decode Mux files. Maybe you wanted to use encode()?');
        }
        
        if (false == $this->srcFile->isSupported()) {
            throw new Exception("Only version 1 mux files are supported.");
        }
        
        $keySalt = $this->srcFile->getKeySalt();
        $key = Utils::generateKey($keySalt);

        $data = $this->srcFile->getData();
        
        $decoded = Utils::keyXORdata($key, $data);
        
        return $decoded;
    }

    /**
     * Convert the file specified in __construct to a mux file.
     * 
     * It's possible to specify a keySalt (esp. for testing) or to get one
     * generated by this method.
     * 
     * @param string $keySalt optional. Salt for encryption.
     * @return string file content of the mux file
     * @throws Exception
     */
    public function ogg2mux($keySalt = null): string {
        if (false == $this->srcFile instanceof Ogg) {
            throw new Exception('Can only call encode Ogg files. Maybe you wanted to use decode()?');
        }
        
        if ($keySalt == null) {
            $keySalt = random_bytes(4);
        }
        
        $key = Utils::generateKey($keySalt);

        $data = $this->srcFile->getContent();
        
        $encoded = Utils::keyXORdata($key, $data);
        
        $destFile = new Mux();
        $destFile->setVersion(1);
        $destFile->setKeySalt($keySalt);
        $destFile->setData($encoded);
        
        return $destFile->getContent();
    }
}
